# This is the main workflow for testing the code, notebooks and package.
# It is divided into three jobs:
# 1. Code-consistency:
#    - Check the validity of pyproject.toml
#    - Lint the code base
#    - Lint the Jupyter notebooks
# 2. Test-code-and-notebooks:
#    - Test the code base and upload coverage to Codecov
#    - Test the Jupyter notebooks
#    - Create the Python package
#    - Upload the Python package for the next job
# 3. Test-package:
#    - Download the Python package from the previous job
#    - Install the downloaded Python package
#    - Test the code base
#    - Test the Jupyter notebooks

name: Test code, notebooks and package

on:
  # Trigger the workflow on push
  push:
    # Every branch
    branches:
      - "**"
    # But do not run this workflow on creating a new tag starting with 'v', e.g. 'v1.0.3' (see pypi-publish.yml)
    tags-ignore:
      - 'v*'
  # Trigger the workflow on pull request
  pull_request:
    branches:
      - "**"
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Allow only one concurrent workflow, skipping runs queued between the run in-progress and latest queued.
# And cancel in-progress runs.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:

  # Job 1: Check code consistency
  code-consistency:

    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.12']

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'  # full history with tags to get the version number by versioningit

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Check validity of pyproject.toml
        run: |
          pip install 'validate-pyproject[all]'
          validate-pyproject pyproject.toml

      # Install Python linter and code formatter and run in the project root
      - name: Install and run Ruff
        run: |
          pip install ruff
          ruff check .

      - name: Suggestion to fix linter issues (for *.py files)
        if: ${{ failure() }}
        run: |
          echo "In project root run 'ruff check . --fix' and commit changes to fix issues."
          exit 1

      # Install quality assurance package for Jupyter notebooks and run in the sample directory
      - name: Install and run nbQA
        run: |
          pip install ruff nbqa
          nbqa ruff examples/

      - name: Suggestion to fix linter issues (for *.ipynb files)
        if: ${{ failure() }}
        run: |
            echo "In project root run 'nbqa ruff examples/ --fix' and commit changes to fix issues."
            exit 1

  # Job 2: Test code and upload coverage to Codecov. Test Jupyter notebooks.
  test-code-and-notebooks:
    needs: code-consistency  # previous job 'code-consistency' need to be finished first

    # current job matrix. if modified, remember to UPDATE the strategy in the next job
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, windows-2022, macos-13, macos-14]
        python-version: ['3.10', '3.11', '3.12']

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: '0'  # full history with tags to get the version number by versioningit

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Upgrade package installer for Python
      run: python -m pip install --upgrade pip

    - name: Install Python dependencies
      run: pip install '.[dev,charts]'

    - name: Run Python tests and create coverage report
      run: >
        pytest tests/
        --cov=./
        --cov-report=xml:coverage/coverage.xml
        --junitxml=./coverage/junit.xml
        --color=yes
        -n auto

    #- name: Upload test results to Codecov
    #  if: ${{ !cancelled() }}
    #  uses: codecov/test-results-action@v1
    #  with:
    #    files: ./coverage/junit.xml
    #    fail_ci_if_error: true  # optional (default = false)
    #    name: Pytest results
    #    token: ${{ secrets.CODECOV_TOKEN }}

    #- name: Upload coverage report to Codecov
    #  uses: codecov/codecov-action@v4
    #  with:
    #    files: ./coverage/coverage.xml
    #    env_vars: OS,PYTHON
    #    fail_ci_if_error: true  # optional (default = false)
    #    name: Pytest coverage
    #    token: ${{ secrets.CODECOV_TOKEN }}
    #  env:
    #    OS: ${{ matrix.os }}
    #    PYTHON: ${{ matrix.python-version }}

    - name: Run Jupyter Notebooks as tests
      shell: bash
      run: >
        pytest 
        --nbmake examples 
        --ignore-glob='examples/*emcee*'
        --nbmake-timeout=300 
        --color=yes
        -n=auto

    - name: Create Python package  # dist/*.whl
      run: python -m build --wheel --outdir dist

    - name: Upload zipped Python package (with tests and examples) for next job
      uses: actions/upload-artifact@v4
      with:
        name: EasyDiffractionLib_py${{ matrix.python-version }}_${{ matrix.os }}_${{ runner.arch }}
        path: |
          dist/*.whl
          tests/
          examples/
        if-no-files-found: "error"
        compression-level: 0

  # Job 3: Test the package
  test-package:
    needs: test-code-and-notebooks  # the previous job needs to be finished first

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, windows-2022, macos-13, macos-14]
        python-version: ['3.10', '3.11', '3.12']

    runs-on: ${{ matrix.os }}

    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Upgrade package installer for Python
      run: python -m pip install --upgrade pip

    - name: Download zipped Python package (with tests and examples) from previous job
      uses: actions/download-artifact@v4
      with:  # name or path are taken from the upload step of the previous job
        name: EasyDiffractionLib_py${{ matrix.python-version }}_${{ matrix.os }}_${{ runner.arch }}
        path: .  # directory to extract downloaded zipped artifacts

    # The local version must be higher than the PyPI version for pip to
    # prefer the local version. So, after a new release and a new tag,
    # remember to merge the master branch with the develop branch,
    # and then create a new feature branch from the develop branch.
    - name: Install Python package from previous job with 'dev' extras
      run: pip install 'easydiffraction[dev]' --find-links=dist

    - name: Run Python tests
      run: >
        pytest tests/
        --color=yes
        -n auto

    - name: Run Jupyter Notebooks as tests
      shell: bash
      run: >
        pytest 
        --nbmake examples/
        --ignore-glob='examples/*emcee*'
        --nbmake-timeout=300 
        --color=yes
        -n=auto  
